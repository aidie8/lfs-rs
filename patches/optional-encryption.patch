From ce4541ef6900174e4e9ed4a41bb24739aab10e25 Mon Sep 17 00:00:00 2001
From: js6pak <kubastaron@hotmail.com>
Date: Sun, 11 Sep 2022 19:53:57 +0200
Subject: [PATCH] Make encryption optional

Co-authored-by: Jason White <github@jasonwhite.io>
---
 README.md          |  16 ++++----
 src/lib.rs         |  35 +++++++++++-----
 src/main.rs        |   5 ++-
 src/storage/mod.rs | 100 +++++++++++++++++++++++++++++++++++++++++++++
 4 files changed, 137 insertions(+), 19 deletions(-)

diff --git a/README.md b/README.md
index 110cfee..7791f60 100644
--- a/README.md
+++ b/README.md
@@ -23,6 +23,7 @@ A high-performance, caching Git LFS server with an AWS S3 back-end.
    the cache transparently. The client should never notice this happening.
 
  - Encryption of LFS objects in both the cache and in permanent storage.
+   (Optional)
 
  - Separation of GitHub organizations and projects. Just specify the org and
    project names in the URL and they are automatically created. If two projects
@@ -43,22 +44,23 @@ know by submitting an issue.
 
 ## Running It
 
-### Generate an encryption key
+### Generate an encryption key (optional)
 
-All LFS objects are encrypted with the xchacha20 symmetric stream cipher. You
-must generate a 32-byte encryption key before starting the server.
+If configured, all LFS objects are encrypted with the xchacha20 symmetric stream
+cipher. You must generate a 32-byte encryption key before starting the server.
 
 Generating a random key is easy:
 
     openssl rand -hex 32
 
 Keep this secret and save it in a password manager so you don't lose it. We will
-pass this to the server below.
+pass this to the server below via the `--key` option. If the `--key` option is
+**not** specified, then the LFS objects are **not** encrypted.
 
 **Note**:
- - If the key ever changes, all existing LFS objects will become garbage.
-   When the Git LFS client attempts to download them, the SHA256 verification
-   step will fail.
+ - If the key ever changes (or if encryption is disabled), all existing LFS
+   objects will become garbage.  When the Git LFS client attempts to download
+   them, the SHA256 verification step will fail.
  - LFS objects in both the cache and in permanent storage are encrypted.
    However, objects are decrypted before being sent to the LFS client, so take
    any necessary precautions to keep your intellectual property safe.
diff --git a/src/lib.rs b/src/lib.rs
index 8c0d2db..e327231 100644
--- a/src/lib.rs
+++ b/src/lib.rs
@@ -34,7 +34,7 @@ use std::net::SocketAddr;
 use std::path::PathBuf;
 use std::sync::Arc;
 
-use futures::future::{self, Future, TryFutureExt};
+use futures::future::{self, Either, Future, TryFutureExt};
 use hyper::{
     self,
     server::conn::{AddrIncoming, AddrStream},
@@ -82,14 +82,14 @@ impl Cache {
 #[derive(Debug)]
 pub struct S3ServerBuilder {
     bucket: String,
-    key: [u8; 32],
+    key: Option<[u8; 32]>,
     prefix: Option<String>,
     cdn: Option<String>,
     cache: Option<Cache>,
 }
 
 impl S3ServerBuilder {
-    pub fn new(bucket: String, key: [u8; 32]) -> Self {
+    pub fn new(bucket: String, key: Option<[u8; 32]>) -> Self {
         Self {
             bucket,
             prefix: None,
@@ -106,7 +106,7 @@ impl S3ServerBuilder {
     }
 
     /// Sets the encryption key to use.
-    pub fn key(&mut self, key: [u8; 32]) -> &mut Self {
+    pub fn key(&mut self, key: Option<[u8; 32]>) -> &mut Self {
         self.key = key;
         self
     }
@@ -174,11 +174,21 @@ impl S3ServerBuilder {
                 let disk = Faulty::new(disk);
 
                 let cache = Cached::new(cache.max_size, disk, s3).await?;
-                let storage = Verify::new(Encrypted::new(self.key, cache));
+                let storage = Verify::new(match self.key {
+                    Some(key) => {
+                        Either::Left(Verify::new(Encrypted::new(key, cache)))
+                    }
+                    None => Either::Right(Verify::new(cache)),
+                });
                 Ok(Box::new(spawn_server(storage, &addr)))
             }
             None => {
-                let storage = Verify::new(Encrypted::new(self.key, s3));
+                let storage = Verify::new(match self.key {
+                    Some(key) => {
+                        Either::Left(Verify::new(Encrypted::new(key, s3)))
+                    }
+                    None => Either::Right(Verify::new(s3)),
+                });
                 Ok(Box::new(spawn_server(storage, &addr)))
             }
         }
@@ -202,14 +212,14 @@ impl S3ServerBuilder {
 #[derive(Debug)]
 pub struct LocalServerBuilder {
     path: PathBuf,
-    key: [u8; 32],
+    key: Option<[u8; 32]>,
     cache: Option<Cache>,
 }
 
 impl LocalServerBuilder {
     /// Creates a local server builder. `path` is the path to the folder where
     /// all of the LFS data will be stored.
-    pub fn new(path: PathBuf, key: [u8; 32]) -> Self {
+    pub fn new(path: PathBuf, key: Option<[u8; 32]>) -> Self {
         Self {
             path,
             key,
@@ -218,7 +228,7 @@ impl LocalServerBuilder {
     }
 
     /// Sets the encryption key to use.
-    pub fn key(&mut self, key: [u8; 32]) -> &mut Self {
+    pub fn key(&mut self, key: Option<[u8; 32]>) -> &mut Self {
         self.key = key;
         self
     }
@@ -240,7 +250,12 @@ impl LocalServerBuilder {
         addr: SocketAddr,
     ) -> Result<impl Server, Box<dyn std::error::Error>> {
         let storage = Disk::new(self.path).map_err(Error::from).await?;
-        let storage = Verify::new(Encrypted::new(self.key, storage));
+        let storage = Verify::new(match self.key {
+            Some(key) => {
+                Either::Left(Verify::new(Encrypted::new(key, storage)))
+            }
+            None => Either::Right(Verify::new(storage)),
+        });
 
         log::info!("Local disk storage initialized.");
 
diff --git a/src/main.rs b/src/main.rs
index f511920..3d97b1f 100644
--- a/src/main.rs
+++ b/src/main.rs
@@ -64,13 +64,14 @@ struct GlobalArgs {
     #[structopt(long = "port", default_value = "8080", env = "PORT")]
     port: u16,
 
-    /// Encryption key to use.
+    /// Encryption key to use. If not specified, then objects are *not*
+    /// encrypted.
     #[structopt(
         long = "key",
         parse(try_from_str = FromHex::from_hex),
         env = "RUDOLFS_KEY"
     )]
-    key: [u8; 32],
+    key: Option<[u8; 32]>,
 
     /// Root directory of the object cache. If not specified or if the local
     /// disk is the storage backend, then no local disk cache will be used.
diff --git a/src/storage/mod.rs b/src/storage/mod.rs
index 9a3ea42..94d9b59 100644
--- a/src/storage/mod.rs
+++ b/src/storage/mod.rs
@@ -47,6 +47,7 @@ use async_trait::async_trait;
 use bytes::Bytes;
 use futures::{
     channel::mpsc,
+    future::Either,
     sink::SinkExt,
     stream::{BoxStream, Stream, StreamExt},
     Future,
@@ -298,3 +299,102 @@ where
         self.as_ref().upload_url(key, expires_in).await
     }
 }
+
+#[async_trait]
+impl<A, B> Storage for Either<A, B>
+where
+    A: Storage + Send + Sync,
+    B: Storage<Error = A::Error> + Send + Sync,
+    // A: Storage + Send + Sync + 'static,
+    // B: Storage<Error = A::Error> + Send + Sync + 'static,
+{
+    type Error = A::Error;
+
+    #[inline]
+    async fn get(
+        &self,
+        key: &StorageKey,
+    ) -> Result<Option<LFSObject>, Self::Error> {
+        match self {
+            Either::Left(x) => x.get(key),
+            Either::Right(x) => x.get(key),
+        }
+        .await
+    }
+
+    #[inline]
+    async fn put(
+        &self,
+        key: StorageKey,
+        value: LFSObject,
+    ) -> Result<(), Self::Error> {
+        match self {
+            Either::Left(x) => x.put(key, value),
+            Either::Right(x) => x.put(key, value),
+        }
+        .await
+    }
+
+    #[inline]
+    async fn size(&self, key: &StorageKey) -> Result<Option<u64>, Self::Error> {
+        match self {
+            Either::Left(x) => x.size(key),
+            Either::Right(x) => x.size(key),
+        }
+        .await
+    }
+
+    #[inline]
+    async fn delete(&self, key: &StorageKey) -> Result<(), Self::Error> {
+        match self {
+            Either::Left(x) => x.delete(key),
+            Either::Right(x) => x.delete(key),
+        }
+        .await
+    }
+
+    #[inline]
+    fn list(&self) -> StorageStream<(StorageKey, u64), Self::Error> {
+        match self {
+            Either::Left(x) => x.list(),
+            Either::Right(x) => x.list(),
+        }
+    }
+
+    #[inline]
+    async fn total_size(&self) -> Option<u64> {
+        match self {
+            Either::Left(x) => x.total_size(),
+            Either::Right(x) => x.total_size(),
+        }
+        .await
+    }
+
+    #[inline]
+    async fn max_size(&self) -> Option<u64> {
+        match self {
+            Either::Left(x) => x.max_size(),
+            Either::Right(x) => x.max_size(),
+        }
+        .await
+    }
+
+    fn public_url(&self, key: &StorageKey) -> Option<String> {
+        match self {
+            Either::Left(x) => x.public_url(key),
+            Either::Right(x) => x.public_url(key),
+        }
+    }
+
+    async fn upload_url(
+        &self,
+        key: &StorageKey,
+        expires_in: Duration,
+    ) -> Option<String> {
+        match self {
+            Either::Left(x) => x.upload_url(key, expires_in),
+            Either::Right(x) => x.upload_url(key, expires_in),
+        }
+        .await
+    }
+}
